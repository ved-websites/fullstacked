name: CD - API

on: workflow_dispatch

env:
  PNPM_VERSION: 9
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/api

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Get deployed version
        id: api-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: ./api

      - name: Extract metadata for Docker
        id: docker-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=v${{  steps.api-version.outputs.current-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Generate API Lockfile
        run: |
          pnpm config set shared-workspace-lockfile false
          pnpm --filter ./api install --lockfile-only --no-frozen-lockfile

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
          # cache-from: type=gha # Cache layers using GitHub Actions cache
          # cache-to: type=gha,mode=max # Store layers in GitHub Actions cache

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Get SHA of Deployed Commit
        id: deployed-commit-sha
        run: |
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          
      - name: Format Docker Tags for Comment
        id: format-tags
        run: |
          # Get the raw JSON array string from docker-meta outputs
          # Ensure you use 'fromJSON' to parse the string into an actual JSON object/array
          TAGS_JSON="${{ steps.docker-meta.outputs.tags }}"

          # Use jq to iterate through the array and format each item as a Markdown list item
          # The -r flag outputs raw strings without quotes
          # .[] iterates over each element
          # "- " + . prepends "- " to each element
          # join("\n") joins the resulting array elements with newlines
          FORMATTED_LIST=$(echo "$TAGS_JSON" | jq -r '
            .[] | "- " + .
          ')

          # Output the formatted list so it can be used by subsequent steps
          echo "formatted_tags_list<<EOF" >> "$GITHUB_OUTPUT"
          echo "$FORMATTED_LIST" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
        shell: bash # Use bash for multi-line output via heredoc (EOF)

      - name: Comment on deploy commit
        uses: peter-evans/commit-comment@v3
        with:
          token: '${{ secrets.GH_BOT_TOKEN }}'
          sha: '${{ steps.deployed-commit-sha.outputs.sha }}'
          body: |
            ðŸ¤– This commit was deployed to the GitHub Registry as version ${{ steps.api-version.outputs.current-version }}!
            
            **Images** :
            ${{ steps.format-tags.outputs.formatted_tags_list }}
            

  sentry:
    name: Sentry Release
    runs-on: ubuntu-latest
    needs: [deploy]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: true

      - name: Build api for Sentry release
        run: pnpm run build

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ vars.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ vars.SENTRY_PROJECT }}-backend
        with:
          environment: 'api-prod'
          working_directory: '.'
          sourcemaps: './dist'
