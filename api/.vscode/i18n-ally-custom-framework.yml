# .vscode/i18n-ally-custom-framework.yml

# An array of strings which contain Language Ids defined by VS Code
# You can check available language ids here: https://code.visualstudio.com/docs/languages/identifiers
languageIds:
  - typescript
  - handlebars

# An array of RegExes to find the key usage. **The key should be captured in the first match group**.
usageMatchRegex:
  # The following example shows how to detect `t("your.i18n.keys")`
  # the `{key}` will be placed by a proper keypath matching regex,
  # you can ignore it and use your own matching rules as well
  - "[^\\w\\d]new I18nException\\(['\"`]({key})['\"`]"
  - "[^\\w\\d]i18n\\??.t\\(['\"`]({key})['\"`]"
  - "(?:{{ |\\()t ['\"`]({key})['\"`]"
  - "[^\\w\\d]['\"`]({key})['\"`] satisfies I18nKey"

# A RegEx to set a custom scope range. This scope will be used as a prefix when detecting keys
# and works like how the i18next framework identifies the namespace scope from the
# useTranslation() hook.
# scopeRangeRegex: "new I18nException\\(\\s*\\[?\\s*['\"`](.*?)['\"`]"

# An array of strings containing refactor templates.
# The "$1" will be replaced by the keypath specified.
# Optional: uncomment the following two lines to use
refactorTemplates:
  - i18n.t('$1')
  - this.i18n.t('$1')
  - new I18nException('$1')
  - "'$1' satisfies I18nKey"
# If set to true, only enables this custom framework (will disable all built-in frameworks)
# monopoly: true
