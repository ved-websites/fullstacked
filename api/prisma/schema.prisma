// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/_generated/prisma/client"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/_generated/zod"

  useMultipleFiles  = true
  writeBarrelFiles  = false
  useTypeAssertions = true
}

// ===========
//    AUTH
// ===========

model User {
  id String @id @unique

  email     String  @unique
  firstName String? @map("first_name")
  lastName  String? @map("last_name")

  lang          String?
  emailLang     String
  registerToken String? @unique @map("register_token")

  profilePictureRef String? @map("profile_picture_ref")

  hashedPassword String?

  sessions              Session[]
  passwordResetAttempts PasswordResetAttempt[]
  roles                 Role[]
  messages              Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Session {
  id        String   @id @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

// model Key {
//   id              String  @id @unique
//   hashed_password String?

//   user    User   @relation(references: [id], fields: [user_id], onDelete: Cascade)
//   user_id String

//   @@index([user_id])
//   @@map("keys")
// }

// ===========
//  END AUTH
// ===========

// ===========
//    ROLES
// ===========

model Role {
  id   Int    @id @default(autoincrement())
  /// @Validator.IsNotEmpty()
  text String @unique

  users User[]

  createdAt DateTime @default(now())

  @@map("roles")
}

model PasswordResetAttempt {
  id Int @id @default(autoincrement())

  user   User    @relation(fields: [userId], references: [id])
  userId String
  token  String
  used   Boolean @default(false)

  expiryDate DateTime

  @@map("password_reset_attempts")
}

// ===========
//  END AUTH
// ===========

// ===========
//    APP
// ===========

model Message {
  id   Int      @id @default(autoincrement())
  /// @Validator.IsNotEmpty()
  text String
  time DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("messages")
}
