// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "_generated/.prisma/client"
}

generator nestgraphql {
  provider = "node prisma/generators/prisma-nestjs-graphql.js"
  output   = "../src/_generated/prisma-nestjs-graphql"
  reExport = "Directories"

  fields_Validator_from  = "class-validator"
  fields_Validator_input = "true"
}

model AuthUser {
  id           String        @id @unique
  auth_session AuthSession[]
  auth_key     AuthKey[]
  // here you can add custom fields for your user
  // e.g. name, email, username, roles, etc.

  username  String    @unique
  firstName String?   @map("first_name")
  lastName  String?   @map("last_name")
  messages  Message[]

  @@map("auth_users")
}

model AuthSession {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt

  auth_user AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_sessions")
}

model AuthKey {
  id              String  @id @unique
  /// @HideField({ output: true, input: true })
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?

  auth_user AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_keys")
}

model Message {
  id   Int      @id @default(autoincrement())
  /// @Validator.IsNotEmpty()
  text String
  /// @HideField({ output: false, input: true })
  time DateTime @default(now())

  authUser   AuthUser @relation(fields: [authUserId], references: [id], onDelete: Cascade)
  /// @HideField({ output: true, input: true })
  authUserId String

  @@map("messages")
}
